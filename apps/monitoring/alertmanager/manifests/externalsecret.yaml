---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: alertmanager-secret
  namespace: monitoring
spec:
  refreshInterval: 5m
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword-connect
  target:
    name: alertmanager-secret
    template:
      engineVersion: v2
      data:
        alertmanager.yaml: |
          global:
            resolve_timeout: 5m
          route:
            group_by: ["alertname", "namespace"]
            group_interval: 5m
            group_wait: 1m
            receiver: "telegram"
            repeat_interval: 12h
            routes:
              - receiver: "null"
                matchers:
                  - alertname = "InfoInhibitor"
              - receiver: "heartbeat"
                group_by: ["alertname"]
                group_interval: 1m
                group_wait: 0s
                repeat_interval: 59s
                matchers:
                  - alertname = "Watchdog"
              - receiver: "null"
                matchers:
                  - severity = "none"
              - receiver: "null"
                matchers:
                  - severity = "info"
              - receiver: "telegram"
                matchers:
                  - severity = "critical"
          inhibit_rules:
            - equal: ["alertname", "namespace"]
              source_matchers:
                - severity = "critical"
              target_matchers:
                - severity = "warning"
          receivers:
            - name: "null"
            - name: "telegram"
              telegram_configs:
              - bot_token: "{{ .BOT_TOKEN }}"
                api_url: https://api.telegram.org
                chat_id: {{ .CHAT_ID }}
                parseMode: "MarkdownV2"
                title: |-
                  {{- if eq .Status "firing" -}}
                  🚨 *ALERT FIRING*
                  {{- else -}}
                  ✅ *ALERT RESOLVED*
                  {{- end }}
                message: |-
                  {{- range .Alerts }}
                  
                  {{- if eq .Labels.severity "critical" }}
                  🚨 *Severity:* `CRITICAL`
                  {{- else if eq .Labels.severity "warning" }}
                  ⚠️ *Severity:* `WARNING`
                  {{- else if eq .Labels.severity "info" }}
                  ℹ️ *Severity:* `INFO`
                  {{- else }}
                  📊 *Severity:* `{{ .Labels.severity | escapeMarkdownV2 }}`
                  {{- end }}
                  
                  {{- if .Annotations.description }}
                  📝 *Description:*
                  ```
                  {{ .Annotations.description | escapeMarkdownV2 }}
                  ```
                  {{- else if .Annotations.summary }}
                  📋 *Summary:*
                  ```
                  {{ .Annotations.summary | escapeMarkdownV2 }}
                  ```
                  {{- else if .Annotations.message }}
                  💬 *Message:*
                  ```
                  {{ .Annotations.message | escapeMarkdownV2 }}
                  ```
                  {{- else }}
                  🔔 Alert has been triggered
                  {{- end }}
                  
                  *━━━━━━━━━━━━━━━━━━━━━━━*
                  *Alert Details:*
                  {{- if .Labels.namespace }}
                  Namespace: `{{ .Labels.namespace | escapeMarkdownV2 }}`
                  {{- end }}
                  {{- if .Labels.pod }}
                  Pod: `{{ .Labels.pod | escapeMarkdownV2 }}`
                  {{- end }}
                  {{- if .Labels.job }}
                  Job: `{{ .Labels.job | escapeMarkdownV2 }}`
                  {{- end }}
                  {{- if .Labels.instance }}
                  Instance: `{{ .Labels.instance | escapeMarkdownV2 }}`
                  {{- end }}
                  {{- if .Labels.container }}
                  Container: `{{ .Labels.container | escapeMarkdownV2 }}`
                  {{- end }}
                  {{- if .Labels.service }}
                  Service: `{{ .Labels.service | escapeMarkdownV2 }}`
                  {{- end }}
                  
                  ⏰ *Timeline:*
                  {{- if eq .Status "firing" }}
                  🔥 Started: {{ .StartsAt }}
                  {{- else }}
                  ✅ Resolved: {{ .EndsAt }}
                  🕐 Duration: {{ .StartsAt | since | humanizeDuration }}
                  {{- end }}
                  
                  {{- end }}
            - name: "heartbeat"
              webhook_configs:
              - send_resolved: true
                url: "{{ .HEARTBEAT_URL }}"
  dataFrom:
    - extract:
        key: alertmanager
