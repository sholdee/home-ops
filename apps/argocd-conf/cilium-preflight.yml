apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cilium-preflight
spec:
  destination:
    name: in-cluster
    namespace: kube-system
  project: k3s
  source:
    chart: cilium
    repoURL: https://helm.cilium.io/
    targetRevision: 1.15.7
    helm:
      values: |-
        preflight:
          enabled: true
        agent: false
        operator:
          enabled: false
        k8sServiceHost: "127.0.0.1"
        k8sServicePort: "6444"
  syncPolicy:
    automated:
      prune: true
    syncOptions:
      - ApplyOutOfSyncOnly=true
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
    - /status
  - group: apps
    kind: DaemonSet
    jsonPointers:
    - /spec/template/spec/containers/0/image
    - /status
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cilium-preflight-cleanup-job
  namespace: kube-system
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: cilium-preflight-cleanup-sa
      restartPolicy: Never
      containers:
      - name: kubectl
        image: bitnami/kubectl:1.30.3
        command:
        - /bin/sh
        - -c
        - |
          # Function to check if resource exists
          resource_exists() {
            kubectl get $1 $2 -n kube-system --no-headers --output=name 2>/dev/null | grep -q $2
          }

          # Function to wait for resource readiness
          wait_for_ready() {
            local resource_type=$1
            local resource_name=$2
            local timeout=300  # 5 minutes timeout
            
            echo "Waiting for $resource_type $resource_name to be ready..."
            if ! kubectl rollout status $resource_type/$resource_name -n kube-system --timeout=${timeout}s; then
              echo "$resource_type $resource_name did not become ready within the timeout period."
              return 1
            fi
            echo "$resource_type $resource_name is ready"
          }

          # Check and wait for deployment
          if resource_exists deployment cilium-pre-flight-check; then
            wait_for_ready deployment cilium-pre-flight-check || exit 1
          else
            echo "Deployment cilium-pre-flight-check not found"
          fi

          # Check and wait for daemonset
          if resource_exists daemonset cilium-pre-flight-check; then
            wait_for_ready daemonset cilium-pre-flight-check || exit 1
          else
            echo "DaemonSet cilium-pre-flight-check not found"
          fi

          echo "Preflight check resources are ready or not present. Proceeding with cleanup."

          # Perform cleanup
          kubectl delete deployment -n kube-system cilium-pre-flight-check --ignore-not-found
          kubectl delete daemonset -n kube-system cilium-pre-flight-check --ignore-not-found

          # Check if any resources were actually deleted
          if [ $? -eq 0 ]; then
            echo "Cleanup completed successfully."
          else
            echo "No resources found to clean up."
          fi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cilium-preflight-cleanup-sa
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-preflight-cleanup-role
  namespace: kube-system
rules:
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets"]
  verbs: ["delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-preflight-cleanup-rolebinding
  namespace: kube-system
subjects:
- kind: ServiceAccount
  name: cilium-preflight-cleanup-sa
  namespace: kube-system
roleRef:
  kind: Role
  name: cilium-preflight-cleanup-role
  apiGroup: rbac.authorization.k8s.io
