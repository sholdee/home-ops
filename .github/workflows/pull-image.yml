name: Verify Docker image

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-author:
    if: startsWith(github.event.pull_request.title, 'Update') && (contains(github.event.pull_request.title, 'Docker tag') || contains(github.event.pull_request.title, 'Docker digest'))
    runs-on: ARM64
    outputs:
      matched: ${{ steps.check_author.outputs.matched }}
    steps:
      - name: Check PR Author
        id: check_author
        run: |
          AUTHORIZED_USERS=("sholdee" "pull-bunyan[bot]")
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          
          if [[ " ${AUTHORIZED_USERS[@]} " =~ " $PR_AUTHOR " ]]; then
            echo "matched=true" >> $GITHUB_OUTPUT
            echo "✅ Authorized user: $PR_AUTHOR"
          else
            echo "matched=false" >> $GITHUB_OUTPUT
            echo "❌ Unauthorized user: $PR_AUTHOR"
          fi

  verify-image-pull:
    needs: check-author
    if: needs.check-author.outputs.matched == 'true'
    runs-on: ARM64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Extract Image, Tag, and Digest from PR Diff
        id: extract_image_tag_digest
        env:
          PR_NUMBER: ${{ github.event.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python .github/scripts/extract_image_info.py || { echo "❌ Script failed!"; exit 1; }

      - name: Attempt to pull image
        id: pull_image
        run: |
          > pull_results.txt
          PULL_FAILED=0  # Track failures
          
          IMAGE_FULL="${IMAGE}:${TAG}"
          [ -n "$DIGEST" ] && IMAGE_FULL="${IMAGE}@${DIGEST}"
          
          echo "Pulling image: $IMAGE_FULL"
          if sudo crictl --debug pull "$IMAGE_FULL"; then
              echo "✅ $IMAGE_FULL" >> pull_results.txt
          else
              echo "❌ $IMAGE_FULL" >> pull_results.txt
              PULL_FAILED=1  # Mark failure
          fi
          
          if [ "$PULL_FAILED" -eq 1 ]; then
            exit 1
          fi

      - name: Format Image Pull Status
        id: format_image_pull_status
        run: |
          echo "IMAGE_PULL_COMMENT<<EOF" >> $GITHUB_ENV
          echo "| Status | Image  |" >> $GITHUB_ENV
          echo "|--------|--------|" >> $GITHUB_ENV
          while read -r line; do
            STATUS=$(echo "$line" | awk '{print $1}')
            IMAGE=$(echo "$line" | awk '{$1=""; print $0}' | xargs)
            echo "| $STATUS | \`$IMAGE\` |" >> $GITHUB_ENV
          done < pull_results.txt
          echo "EOF" >> $GITHUB_ENV

      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Add Comment
        continue-on-error: true
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: "${{ steps.app-token.outputs.token }}"
          message-id: "${{ github.event.pull_request.number }}/docker-verify"
          message-failure: "Error adding comment"
          message: |
            ${{ env.IMAGE_PULL_COMMENT }}

      - name: Add `donotmerge` Label if pull fails
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          num=${{ github.event.pull_request.number }}
          repo=${{ github.repository }}
          has_label=$(gh api repos/$repo/issues/$num/labels --jq 'map(.name=="donotmerge") | any')
          if [ "$has_label" != "true" ]; then
            gh api -X POST repos/$repo/issues/$num/labels -f labels='["donotmerge"]'
            echo "Added label: donotmerge"
          else
            echo "Label already present, skipping add."
          fi

      - name: Remove `donotmerge` Label if pull succeeds
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          num=${{ github.event.pull_request.number }}
          repo=${{ github.repository }}
          has_label=$(gh api repos/$repo/issues/$num/labels --jq 'map(.name=="donotmerge") | any')
          if [ "$has_label" = "true" ]; then
            gh api -X DELETE repos/$repo/issues/$num/labels/donotmerge
            echo "Removed label: donotmerge"
          else
            echo "Label not present, nothing to remove."
          fi
