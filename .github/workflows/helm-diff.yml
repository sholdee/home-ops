name: Helm App Diff

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-author:
    if: startsWith(github.event.pull_request.title, 'Update Helm release')
    runs-on: ubuntu-latest
    outputs:
      matched: ${{ steps.check_author.outputs.matched }}
    steps:
      - name: Check PR Author
        id: check_author
        run: |
          AUTHORIZED_USERS=("sholdee" "pull-bunyan[bot]")
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          
          if [[ " ${AUTHORIZED_USERS[@]} " =~ " $PR_AUTHOR " ]]; then
            echo "matched=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Authorized user: $PR_AUTHOR"
          else
            echo "matched=false" >> $GITHUB_OUTPUT
            echo "‚ùå Unauthorized user: $PR_AUTHOR"
          fi

  helm-diff:
    needs: check-author
    if: needs.check-author.outputs.matched == 'true'
    runs-on: ubuntu-latest
    outputs:
      HAS_DIFF: ${{ steps.read-diff.outputs.HAS_DIFF }}
      ARTIFACT_NAME: ${{ steps.set-artifact-name.outputs.ARTIFACT_NAME }}
    steps:
      - name: Generate Unique Artifact Name
        id: set-artifact-name
        run: |
          ARTIFACT_NAME="helm-diff-$(date +%s)"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Fetch base branch for comparison
        run: git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y wget curl jq
            
            YQ_VERSION=$(curl -sL https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r ".tag_name" | sed 's/v//')
            ARCH=$(uname -m)
            
            if [ "$ARCH" = "x86_64" ]; then
                PLATFORM="amd64"
            elif [ "$ARCH" = "aarch64" ]; then
                PLATFORM="arm64"
            else
                PLATFORM="386"
            fi
            
            wget "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_${PLATFORM}" -O /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
            yq --version
            curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Find Modified Helm Applications
        run: |
            # Fetch PR diff from GitHub API
            DIFF_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "$DIFF_URL")
            
            # Process each modified file and targetRevision pair from JSON
            echo "$RESPONSE" | jq -c '.[] | select(.patch) | 
                 .filename as $file | 
                 .patch |
                 capture("\\+\\s+targetRevision:\\s+(?<ver>.+)") | 
                 {file: $file, version: .ver}' | 
                 while read -r json; do
                 
                    FILE=$(echo "$json" | jq -r '.file')
                    REV=$(echo "$json" | jq -r '.version')
                    
                    echo "üìÑ Processing file: $FILE with targetRevision $REV"
                    
                    # Extract app names and namespaces properly
                    APP_ENTRIES=$(yq e ". | select(.kind == \"Application\" and .spec.source.targetRevision == \"$REV\") | .metadata.name + \"|\" + (.metadata.namespace // \"\")" "$FILE" -r)
                    
                    if [[ -z "$APP_ENTRIES" ]]; then
                        echo "‚ö†Ô∏è No matching applications found for targetRevision: $REV"
                        continue
                    fi
                    
                    # Loop through each app entry
                    echo "$APP_ENTRIES" | while IFS="|" read -r APP_NAME NAMESPACE; do
                        if [[ -z "$APP_NAME" ]]; then
                            continue
                        fi
                        
                        OLD_VERSION=$(git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.targetRevision" -)
                        NEW_VERSION=$(yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.targetRevision" "$FILE")
                        
                        # Skip apps where targetRevision didn't actually change
                        if [[ "$OLD_VERSION" == "$NEW_VERSION" || -z "$NEW_VERSION" ]]; then
                            continue
                        fi
                        
                        CHART_NAME=$(yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.chart" "$FILE")
                        REPO_URL=$(yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.repoURL" "$FILE")
                        DEST_NAMESPACE=$(yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.destination.namespace" "$FILE" || echo "default")
                        
                        echo "üîÑ Processing $APP_NAME (Namespace: ${NAMESPACE:-unset}, Dest: $DEST_NAMESPACE): $OLD_VERSION ‚Üí $NEW_VERSION"
                        
                        OLD_VALUES_OBJECT=$(git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.helm.valuesObject" -)
                        NEW_VALUES_OBJECT=$(yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.helm.valuesObject" "$FILE")
                        
                        OLD_VALUES_STRING=$(git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.helm.values" -)
                        NEW_VALUES_STRING=$(yq e "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.helm.values" "$FILE")
                        
                        OLD_PARAMETERS=$(git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e -o=json -r "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.helm.parameters | select(.) | select(length > 0) | tojson" -)
                        NEW_PARAMETERS=$(yq e -o=json -r "select(.metadata.name == \"$APP_NAME\" and (.metadata.namespace == \"$NAMESPACE\" or .metadata.namespace == null)) | .spec.source.helm.parameters | select(.) | select(length > 0) | tojson" "$FILE")
                        
                        REPO_NAME=$(echo "$REPO_URL" | awk -F/ '{print $NF}')
                        helm repo add "$REPO_NAME" "$REPO_URL"
                        helm repo update
                        
                        echo "üì° Checking available versions for $CHART_NAME..."
                        helm search repo "$REPO_NAME/$CHART_NAME" --versions | head -n 7
                        
                        if ! helm search repo "$REPO_NAME/$CHART_NAME" --versions | grep -q "$OLD_VERSION"; then
                            echo "‚ö†Ô∏è Chart $CHART_NAME version $OLD_VERSION not found in repo $REPO_NAME. Skipping..."
                            continue
                        fi
                        
                        if ! helm search repo "$REPO_NAME/$CHART_NAME" --versions | grep -q "$NEW_VERSION"; then
                            echo "‚ö†Ô∏è Chart $CHART_NAME version $NEW_VERSION not found in repo $REPO_NAME. Skipping..."
                            continue
                        fi
                        
                        HELM_ARGS_NEW=()
                        
                        if [[ -n "$NEW_VALUES_STRING" && "$NEW_VALUES_STRING" != "null" ]]; then
                            echo "$NEW_VALUES_STRING" > new-values.yaml
                            HELM_ARGS_NEW+=("-f" "new-values.yaml")
                        fi
                        
                        if [[ -n "$NEW_VALUES_OBJECT" && "$NEW_VALUES_OBJECT" != "null" ]]; then
                            echo "$NEW_VALUES_OBJECT" > new-values-object.yaml
                            HELM_ARGS_NEW+=("-f" "new-values-object.yaml")
                        fi
                        
                        while IFS= read -r p; do
                            HELM_ARGS_NEW+=("$p")
                        done < <(echo "$NEW_PARAMETERS" | jq -r '.[] | "--set " + .name + "=" + .value ')
                        
                        echo "üé≠ Rendering new Helm template: helm template $APP_NAME $REPO_NAME/$CHART_NAME --version $NEW_VERSION --namespace $DEST_NAMESPACE ${HELM_ARGS_NEW[@]}"
                        helm template "$APP_NAME" "$REPO_NAME/$CHART_NAME" --version "$NEW_VERSION" --namespace "$DEST_NAMESPACE" "${HELM_ARGS_NEW[@]}" > new.yaml || { echo "‚ùå Helm template failed for new version"; continue; }
                        
                        HELM_ARGS_OLD=()
                        
                        if [[ -n "$OLD_VALUES_STRING" && "$OLD_VALUES_STRING" != "null" ]]; then
                            echo "$OLD_VALUES_STRING" > old-values.yaml
                            HELM_ARGS_OLD+=("-f" "old-values.yaml")
                        fi
                        
                        if [[ -n "$OLD_VALUES_OBJECT" && "$OLD_VALUES_OBJECT" != "null" ]]; then
                            echo "$OLD_VALUES_OBJECT" > old-values-object.yaml
                            HELM_ARGS_OLD+=("-f" "old-values-object.yaml")
                        fi
                        
                        while IFS= read -r p; do
                            HELM_ARGS_OLD+=("$p")
                        done < <(echo "$OLD_PARAMETERS" | jq -r '.[] | "--set " + .name + "=" + .value ')
                        
                        echo "üé≠ Rendering old Helm template: helm template $APP_NAME $REPO_NAME/$CHART_NAME --version $OLD_VERSION --namespace $DEST_NAMESPACE ${HELM_ARGS_OLD[@]}"
                        helm template "$APP_NAME" "$REPO_NAME/$CHART_NAME" --version "$OLD_VERSION" --namespace "$DEST_NAMESPACE" "${HELM_ARGS_OLD[@]}" > old.yaml || { echo "‚ùå Helm template failed for old version"; continue; }
                        
                        # Define fields to remove
                        EXCLUDE_FIELDS='.metadata.labels."helm.sh/chart"'
                        EXCLUDE_FIELDS+=',.metadata.labels.chart'
                        EXCLUDE_FIELDS+=',.metadata.labels."app.kubernetes.io/version"'
                        EXCLUDE_FIELDS+=',.spec.template.metadata.labels."helm.sh/chart"'
                        EXCLUDE_FIELDS+=',.spec.template.metadata.labels.chart'
                        EXCLUDE_FIELDS+=',.spec.template.metadata.labels."app.kubernetes.io/version"'
                        EXCLUDE_FIELDS+=',.spec.template.metadata.annotations."checksum/*"'
                        
                        echo "üõ†Ô∏è Processing inflated charts..."
                        yq eval "del(${EXCLUDE_FIELDS}) | select(.kind != \"Secret\")" old.yaml > old_processed.yaml
                        yq eval "del(${EXCLUDE_FIELDS}) | select(.kind != \"Secret\")" new.yaml > new_processed.yaml
                        
                        echo "üîç Generating diff..."
                        git diff --no-index --text old_processed.yaml new_processed.yaml >> diff.txt || true
                    done
                done

      - name: Read Helm Diff Output
        id: read-diff
        run: |
            if [ -s diff.txt ]; then
                echo "‚úÖ Changes detected"
                echo "HAS_DIFF=true" >> $GITHUB_OUTPUT
                echo "diff<<EOF" >> $GITHUB_ENV
                cat diff.txt >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
            else
                echo "‚ùå No changes detected"
                echo "HAS_DIFF=false" >> $GITHUB_OUTPUT
                echo "diff<<EOF" >> $GITHUB_ENV
                echo "No differences detected." >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
            fi

      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Add Comment
        continue-on-error: true
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: "${{ steps.app-token.outputs.token }}"
          message-id: "${{ github.event.pull_request.number }}/helm-diff"
          message-failure: Diff was not successful
          message: |
            ```diff
            ${{ env.diff }}
            ```

      - name: Upload Helm Diff as Artifact
        if: steps.read-diff.outputs.HAS_DIFF == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: diff.txt
          retention-days: 7

  verify-new-images:
    needs: helm-diff
    if: needs.helm-diff.outputs.HAS_DIFF == 'true'
    runs-on: ARM64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Helm Diff
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.helm-diff.outputs.ARTIFACT_NAME }}

      - name: Extract Image Updates from Helm Diff
        id: extract_helm_images
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DIFF_TXT_PATH: diff.txt
        run: |
          python .github/scripts/extract_image_info.py || { echo "‚ùå Script failed!"; exit 1; }

      - name: Attempt to Pull Extracted Images
        id: pull_helm_images
        run: |
          > pull_results.txt
          PULL_FAILED=0  # Track failures
          
          if [ -z "$IMAGE_COUNT" ] || [ "$IMAGE_COUNT" -eq 0 ]; then
            echo "No images detected for pulling."
            exit 0
          fi
          
          for i in $(seq 0 $((IMAGE_COUNT - 1))); do
              IMAGE_VAR="IMAGE_$i"
              TAG_VAR="TAG_$i"
              DIGEST_VAR="DIGEST_$i"
              
              IMAGE_FULL="${!IMAGE_VAR}:${!TAG_VAR}"
              [ -n "${!DIGEST_VAR}" ] && IMAGE_FULL="${!IMAGE_VAR}@${!DIGEST_VAR}"
              
              echo "Pulling image: $IMAGE_FULL"
              if sudo crictl --debug pull "$IMAGE_FULL"; then
                  echo "‚úÖ $IMAGE_FULL" >> pull_results.txt
              else
                  echo "‚ùå $IMAGE_FULL" >> pull_results.txt
                  PULL_FAILED=1  # Mark failure
              fi
          done
          
          if [ "$PULL_FAILED" -eq 1 ]; then
            exit 1  # Ensure job fails if any image pull fails
          fi

      - name: Format Image Pull Status
        id: format_image_pull_status
        run: |
          if [ ! -s pull_results.txt ]; then
            echo "No new images were found. Skipping PR comment."
            exit 0
          fi
          
          echo "IMAGE_PULL_COMMENT<<EOF" >> $GITHUB_ENV
          echo "| Status | Image  |" >> $GITHUB_ENV
          echo "|--------|--------|" >> $GITHUB_ENV
          while read -r line; do
            STATUS=$(echo "$line" | awk '{print $1}')
            IMAGE=$(echo "$line" | awk '{$1=""; print $0}' | xargs)
            echo "| $STATUS | \`$IMAGE\` |" >> $GITHUB_ENV
          done < pull_results.txt
          echo "EOF" >> $GITHUB_ENV

      - name: Store Helm Diff Output
        if: ${{ env.IMAGE_PULL_COMMENT != '' }}
        id: store-diff
        run: |
            echo "diff<<EOF" >> $GITHUB_ENV
            cat diff.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

      - name: Generate Token
        if: ${{ env.IMAGE_PULL_COMMENT != '' }}
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Update Comment
        if: ${{ env.IMAGE_PULL_COMMENT != '' }}
        continue-on-error: true
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: "${{ steps.app-token.outputs.token }}"
          message-id: "${{ github.event.pull_request.number }}/helm-diff"
          message-failure: "Error updating comment"
          message: |
            ```diff
            ${{ env.diff }}
            ```
            ${{ env.IMAGE_PULL_COMMENT }}

      - name: Add `donotmerge` Label if any Pull Fails
        if: failure()
        run: |
          gh pr edit ${{ github.event.number }} --add-label "donotmerge"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove `donotmerge` Label if all Pulls Succeed
        if: success()
        run: |
          gh pr edit ${{ github.event.number }} --remove-label "donotmerge"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
