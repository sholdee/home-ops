name: Helm App Diff

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  helm-diff:
    if: startsWith(github.event.pull_request.title, 'Update Helm release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y yq
          curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Find Modified Helm Applications
        id: extract_apps
        run: |
          FILE="apps/argocd-conf/argocd-apps.yml"
          
          # Extract list of applications where `targetRevision` changed
          CHANGED_APPS=$(git diff --unified=0 --no-color origin/master -- $FILE | grep -E "^\+\s+targetRevision:" | awk '{$NF=$NF};1' | awk '{print $NF}' | tr -d '[:space:]' || true)
          
          if [ -z "$CHANGED_APPS" ]; then
            echo "No Helm chart updates detected."
            exit 0
          fi
          
          echo "## Helm Chart Diff" > diff.txt
          
          # Loop over each changed application and extract its manifest
          for REV in $CHANGED_APPS; do
            APP_NAME=$(yq e "select(.kind == \"Application\" and .spec.source.targetRevision == \"$REV\") | .metadata.name" "$FILE")
            
            # Extract old and new `targetRevision`
            OLD_VERSION=$(git show origin/master:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.targetRevision" -)
            NEW_VERSION=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.targetRevision" "$FILE")
            
            # Skip if there's no version change
            if [[ "$OLD_VERSION" == "$NEW_VERSION" || -z "$NEW_VERSION" ]]; then
              continue
            fi
            
            # Extract other relevant fields
            CHART_NAME=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.chart" "$FILE")
            REPO_URL=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.repoURL" "$FILE")
            NAMESPACE=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.destination.namespace" "$FILE")
            
            echo "Processing $APP_NAME: $OLD_VERSION â†’ $NEW_VERSION"
            
            # Extract `valuesObject` for Helm rendering
            git show origin/master:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.helm.valuesObject" - > old-values.yaml
            yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.helm.valuesObject" "$FILE" > new-values.yaml
            
            # Render Helm manifests for both versions
            helm template "$APP_NAME" "$REPO_URL/$CHART_NAME" --version "$OLD_VERSION" --namespace "$NAMESPACE" -f old-values.yaml > old.yaml
            helm template "$APP_NAME" "$REPO_URL/$CHART_NAME" --version "$NEW_VERSION" --namespace "$NAMESPACE" -f new-values.yaml > new.yaml
            
            # Append diff output
            echo "- **Application**: $APP_NAME" >> diff.txt
            echo "- **Chart**: $CHART_NAME" >> diff.txt
            echo "- **Namespace**: $NAMESPACE" >> diff.txt
            echo "- **Old Version**: $OLD_VERSION" >> diff.txt
            echo "- **New Version**: $NEW_VERSION" >> diff.txt
            echo "\`\`\`diff" >> diff.txt
            diff -u old.yaml new.yaml >> diff.txt || true
            echo "\`\`\`" >> diff.txt
            echo "" >> diff.txt
          done

      - name: Post Diff as PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            $(cat diff.txt)
          repo-token: ${{ secrets.GITHUB_TOKEN }}
