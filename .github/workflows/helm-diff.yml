name: Helm App Diff

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  helm-diff:
    if: startsWith(github.event.pull_request.title, 'Update Helm release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Fetch base branch for comparison
        run: git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y wget curl jq

      - name: Install yq (Latest Version)
        run: |
            YQ_VERSION=$(curl -sL https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r ".tag_name" | sed 's/v//')
            ARCH=$(uname -m)
            
            if [ "$ARCH" = "x86_64" ]; then
                PLATFORM="amd64"
            elif [ "$ARCH" = "aarch64" ]; then
                PLATFORM="arm64"
            else
                PLATFORM="386"
            fi
            
            wget "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_${PLATFORM}" -O /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
            yq --version
            curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Find Modified Helm Applications
        run: |
            FILE="apps/argocd-conf/argocd-apps.yml"
            
            # Extract changed targetRevision lines
            CHANGED_REVISIONS=$(git diff --unified=0 --no-color origin/${{ github.event.pull_request.base.ref }} -- "$FILE" | grep "^\+\s*targetRevision:" || true)
            
            if [ -z "$CHANGED_REVISIONS" ]; then
                  echo "No Helm chart updates detected."
                  exit 0
            fi
            
            echo "Modified Applications:"
            
            # Loop over each changed targetRevision
            echo "$CHANGED_REVISIONS" | while read -r LINE; do
                  NEW_VERSION=$(echo "$LINE" | awk '{print $NF}' | tr -d '[:space:]')
                  
                  # Find applications that now have this targetRevision
                  APP_NAMES=$(yq e ". | select(.spec.source.targetRevision == \"$NEW_VERSION\") | .metadata.name" "$FILE")
                  
                  for APP_NAME in $APP_NAMES; do
                        # Get the old targetRevision from the base branch
                        OLD_VERSION=$(git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.targetRevision" -)
                        
                        # Only process if the version actually changed
                        if [[ "$OLD_VERSION" == "$NEW_VERSION" || -z "$NEW_VERSION" ]]; then
                              continue
                        fi
                        
                        # Extract Helm chart details
                        CHART_NAME=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.chart" "$FILE")
                        REPO_URL=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.repoURL" "$FILE")
                        NAMESPACE=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.destination.namespace" "$FILE")
                        
                        echo "Processing $APP_NAME: $OLD_VERSION â†’ $NEW_VERSION"
                        
                        # Extract valuesObject
                        git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.helm.valuesObject" - > old-values.yaml
                        yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.helm.valuesObject" "$FILE" > new-values.yaml
                        
                        # Dynamically add Helm repo and update
                        REPO_NAME=$(echo "$REPO_URL" | awk -F/ '{print $NF}')
                        helm repo add "$REPO_NAME" "$REPO_URL"
                        helm repo update > /dev/null 2>&1
                        
                        # Verify Helm chart versions exist
                        if ! helm search repo "$REPO_NAME/$CHART_NAME" --versions | grep -q "$OLD_VERSION"; then
                              echo "Error: Chart $CHART_NAME version $OLD_VERSION not found in repo $REPO_NAME. Skipping..."
                              continue
                        fi
                        
                        if ! helm search repo "$REPO_NAME/$CHART_NAME" --versions | grep -q "$NEW_VERSION"; then
                              echo "Error: Chart $CHART_NAME version $NEW_VERSION not found in repo $REPO_NAME. Skipping..."
                              continue
                        fi
                        
                        # Render Helm templates
                        echo "Rendering old Helm template..."
                        helm template "$APP_NAME" "$REPO_NAME/$CHART_NAME" --version "$OLD_VERSION" --namespace "$NAMESPACE" -f old-values.yaml > old.yaml || { echo "Helm template failed for old version"; continue; }
                        
                        echo "Rendering new Helm template..."
                        helm template "$APP_NAME" "$REPO_NAME/$CHART_NAME" --version "$NEW_VERSION" --namespace "$NAMESPACE" -f new-values.yaml > new.yaml || { echo "Helm template failed for new version"; continue; }
                        
                        echo "Checking old.yaml content:"
                        cat old.yaml || echo "old.yaml does not exist!"
                        
                        echo "Checking new.yaml content:"
                        cat new.yaml || echo "new.yaml does not exist!"
                        
                        echo "Checking diff output:"
                        diff -u old.yaml new.yaml >> diff.txt || echo "No changes detected"
                  done
            done

      - name: Read Helm Diff Output
        id: diff
        run: |
            if [ -s diff.txt ]; then
                echo "diff<<EOF" >> $GITHUB_ENV
                cat diff.txt >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
            fi

      - name: Generate Token
        if: ${{ env.diff != '' }}
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Add Comment
        if: ${{ env.diff != '' }}
        continue-on-error: true
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: "${{ steps.app-token.outputs.token }}"
          message-id: "${{ github.event.pull_request.number }}/helm-diff"
          message-failure: Diff was not successful
          message: |
            ```diff
            ${{ env.diff }}
            ```
