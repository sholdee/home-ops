name: Helm App Diff

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  helm-diff:
    if: startsWith(github.event.pull_request.title, 'Update Helm release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Fetch base branch for comparison
        run: git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

      - name: Install Dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y wget curl jq

      - name: Install yq (Latest Version)
        run: |
            YQ_VERSION=$(curl -sL https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r ".tag_name" | sed 's/v//')
            ARCH=$(uname -m)
            
            if [ "$ARCH" = "x86_64" ]; then
                PLATFORM="amd64"
            elif [ "$ARCH" = "aarch64" ]; then
                PLATFORM="arm64"
            else
                PLATFORM="386"
            fi
            
            wget "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_${PLATFORM}" -O /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
            yq --version
            curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Find Modified Helm Applications
        run: |
            FILE="apps/argocd-conf/argocd-apps.yml"
            
            # Extract list of modified targetRevision values
            CHANGED_VERSIONS=$(git diff --unified=0 --no-color origin/${{ github.event.pull_request.base.ref }} -- $FILE | grep -E "^\+\s+targetRevision:" | awk '{$NF=$NF};1' | awk '{print $NF}' | tr -d '[:space:]' || true)
            
            if [ -z "$CHANGED_VERSIONS" ]; then
                  echo "No Helm chart updates detected."
                  exit 0
            fi
            
            echo "Modified Versions: $CHANGED_VERSIONS"
            
            echo "## Helm Chart Diff" > diff.txt
            
            # Loop over changed targetRevision versions
            for REV in $CHANGED_VERSIONS; do
                  APP_NAME=$(yq e '. | select(.kind == "Application" and .spec.source.targetRevision == "'"$REV"'") | .metadata.name' "$FILE")
                  if [ -z "$APP_NAME" ]; then
                        echo "No matching application found for targetRevision: $REV"
                        continue
                  fi
                  
                  OLD_VERSION=$(git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.targetRevision" -)
                  NEW_VERSION=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.targetRevision" "$FILE")
                  
                  if [[ "$OLD_VERSION" == "$NEW_VERSION" || -z "$NEW_VERSION" ]]; then
                        continue
                  fi
                  
                  CHART_NAME=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.chart" "$FILE")
                  REPO_URL=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.repoURL" "$FILE")
                  NAMESPACE=$(yq e "select(.metadata.name == \"$APP_NAME\") | .spec.destination.namespace" "$FILE")
                  
                  echo "Processing $APP_NAME: $OLD_VERSION â†’ $NEW_VERSION"
                  
                  git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" | yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.helm.valuesObject" - > old-values.yaml
                  yq e "select(.metadata.name == \"$APP_NAME\") | .spec.source.helm.valuesObject" "$FILE" > new-values.yaml
                  
                  REPO_NAME=$(echo "$REPO_URL" | awk -F/ '{print $NF}')
                  helm repo add "$REPO_NAME" "$REPO_URL"
                  helm repo update
                  
                  echo "Checking available versions for $CHART_NAME..."
                  helm search repo "$REPO_NAME/$CHART_NAME" --versions
                  
                  if ! helm search repo "$REPO_NAME/$CHART_NAME" --versions | grep -q "$OLD_VERSION"; then
                        echo "Error: Chart $CHART_NAME version $OLD_VERSION not found in repo $REPO_NAME. Skipping..."
                        continue
                  fi
                  
                  if ! helm search repo "$REPO_NAME/$CHART_NAME" --versions | grep -q "$NEW_VERSION"; then
                        echo "Error: Chart $CHART_NAME version $NEW_VERSION not found in repo $REPO_NAME. Skipping..."
                        continue
                  fi
                  
                  echo "Rendering old Helm template..."
                  helm template "$APP_NAME" "$REPO_NAME/$CHART_NAME" --version "$OLD_VERSION" --namespace "$NAMESPACE" -f old-values.yaml > old.yaml || { echo "Helm template failed for old version"; continue; }
                  
                  echo "Rendering new Helm template..."
                  helm template "$APP_NAME" "$REPO_NAME/$CHART_NAME" --version "$NEW_VERSION" --namespace "$NAMESPACE" -f new-values.yaml > new.yaml || { echo "Helm template failed for new version"; continue; }
                  
                  echo "Checking old.yaml content:"
                  cat old.yaml || echo "old.yaml does not exist!"
                  
                  echo "Checking new.yaml content:"
                  cat new.yaml || echo "new.yaml does not exist!"
                  
                  echo "Checking diff output:"
                  diff -u old.yaml new.yaml >> diff.txt || echo "No changes detected"
                  
            done

      - name: Debug Diff Output
        run: |
            echo "Final diff.txt content:"
            cat diff.txt || echo "diff.txt does not exist or is empty!"

      - name: Post Diff as PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            $(cat <<EOF
            $(cat diff.txt)
            EOF
            )
          repo-token: ${{ secrets.GITHUB_TOKEN }}
